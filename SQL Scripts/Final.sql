-- MySQL Script generated by MySQL Workbench
-- Thu Apr 20 20:57:18 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Person` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Person` (
  `Person_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Firstname` VARCHAR(45) NOT NULL,
  `Lastname` VARCHAR(45) NOT NULL,
  `Age` INT(11) NOT NULL,
  `Gender` VARCHAR(45) NOT NULL DEFAULT 'Male',
  `Street` VARCHAR(255) NULL DEFAULT NULL,
  `City` VARCHAR(255) NULL DEFAULT NULL,
  `State` VARCHAR(255) NULL DEFAULT NULL,
  `ZIP` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`Person_ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`ContactInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ContactInfo` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ContactInfo` (
  `ContactInfo_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Person_ID` INT(11) NOT NULL,
  `Phone` VARCHAR(45) NULL DEFAULT NULL,
  `Email` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`ContactInfo_ID`),
  INDEX `P_ID_idx` (`Person_ID` ASC),
  CONSTRAINT `P_ID`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `mydb`.`Person` (`Person_ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Department` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Department` (
  `Department_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Department_Name` VARCHAR(255) NOT NULL,
  `Location` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`Department_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Doctor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Doctor` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Doctor` (
  `Doctor_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Person_ID` INT(11) NOT NULL,
  `ResidentOrNot` VARCHAR(45) NOT NULL DEFAULT 'Not',
  PRIMARY KEY (`Doctor_ID`),
  INDEX `Person_ID_idx` (`Person_ID` ASC),
  CONSTRAINT `Person_ID_Doctor`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `mydb`.`Person` (`Person_ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Patient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Patient` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Patient` (
  `Patient_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Person_ID` INT(11) NOT NULL,
  `InhospitalOrNot` VARCHAR(45) NOT NULL DEFAULT 'Not',
  PRIMARY KEY (`Patient_ID`),
  INDEX `Person_ID_idx` (`Person_ID` ASC),
  CONSTRAINT `Person_ID_Patient`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `mydb`.`Person` (`Person_ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Diagnose`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Diagnose` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Diagnose` (
  `Patient_ID` INT(11) NOT NULL,
  `Doctor_ID` INT(11) NOT NULL,
  `Diagnosis` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`Patient_ID`, `Doctor_ID`),
  INDEX `Doctor_ID_idx` (`Doctor_ID` ASC),
  INDEX `Patient_ID_idx` (`Patient_ID` ASC),
  CONSTRAINT `Doctor_ID_Diagnose`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `mydb`.`Doctor` (`Doctor_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Patient_ID_Diagnose`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `mydb`.`Patient` (`Patient_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Doctor_In`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Doctor_In` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Doctor_In` (
  `Doctor_ID` INT(11) NOT NULL,
  `Department_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Doctor_ID`, `Department_ID`),
  INDEX `Dep_ID_idx` (`Department_ID` ASC),
  CONSTRAINT `Dep_ID_DocIn`
    FOREIGN KEY (`Department_ID`)
    REFERENCES `mydb`.`Department` (`Department_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Doc_ID_DocIn`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `mydb`.`Doctor` (`Doctor_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Drugs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Drugs` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Drugs` (
  `Drug_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(255) NOT NULL,
  `Introduction` VARCHAR(255) NOT NULL,
  `Size` DOUBLE NOT NULL,
  `Price` DOUBLE NOT NULL,
  `Producer` VARCHAR(255) NOT NULL,
  `Inventory` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`Drug_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Operation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Operation` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Operation` (
  `Operation_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Time` DATE NOT NULL,
  `Details` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`Operation_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`ImplementedBy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ImplementedBy` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ImplementedBy` (
  `Operation_ID` INT(11) NOT NULL,
  `Doctor_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Operation_ID`, `Doctor_ID`),
  INDEX `Doc_ID_idx` (`Doctor_ID` ASC),
  CONSTRAINT `Doc_ID_ImpBy`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `mydb`.`Doctor` (`Doctor_ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `OP_ID_ImpBy`
    FOREIGN KEY (`Operation_ID`)
    REFERENCES `mydb`.`Operation` (`Operation_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`MedicalSuppliy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`MedicalSuppliy` ;

CREATE TABLE IF NOT EXISTS `mydb`.`MedicalSuppliy` (
  `MedicalSupply_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(255) NOT NULL,
  `Usage` VARCHAR(255) NOT NULL,
  `Size` DOUBLE NOT NULL,
  `Producer` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`MedicalSupply_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Nurse`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Nurse` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Nurse` (
  `Nurse_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Person_ID` INT(11) NOT NULL,
  `ResidentOrNot` VARCHAR(45) NOT NULL DEFAULT 'Not',
  PRIMARY KEY (`Nurse_ID`),
  INDEX `Person_ID_idx` (`Person_ID` ASC),
  CONSTRAINT `Person_ID_Nurse`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `mydb`.`Person` (`Person_ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Nurse_In`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Nurse_In` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Nurse_In` (
  `Nurse_ID` INT(11) NOT NULL,
  `Department_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Nurse_ID`, `Department_ID`),
  INDEX `Dep_ID_idx` (`Department_ID` ASC),
  CONSTRAINT `Dep_ID_nurIn`
    FOREIGN KEY (`Department_ID`)
    REFERENCES `mydb`.`Department` (`Department_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Nur_ID_nurIn`
    FOREIGN KEY (`Nurse_ID`)
    REFERENCES `mydb`.`Nurse` (`Nurse_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Nursing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Nursing` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Nursing` (
  `Nurse_ID` INT(11) NOT NULL,
  `Patient_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Nurse_ID`, `Patient_ID`),
  INDEX `Nurse_ID_idx` (`Nurse_ID` ASC),
  INDEX `Patient_ID_idx` (`Patient_ID` ASC),
  CONSTRAINT `Nurse_ID_Nursing`
    FOREIGN KEY (`Nurse_ID`)
    REFERENCES `mydb`.`Nurse` (`Nurse_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Patient_ID_Nursing`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `mydb`.`Patient` (`Patient_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`OperatationOn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OperatationOn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`OperatationOn` (
  `Operation_ID` INT(11) NOT NULL,
  `Patient_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Operation_ID`, `Patient_ID`),
  INDEX `Pat_ID_idx` (`Patient_ID` ASC),
  CONSTRAINT `Op_ID_opOn`
    FOREIGN KEY (`Operation_ID`)
    REFERENCES `mydb`.`Operation` (`Operation_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Pat_ID_OpOn`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `mydb`.`Patient` (`Patient_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`OperationDrug`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OperationDrug` ;

CREATE TABLE IF NOT EXISTS `mydb`.`OperationDrug` (
  `Operation_ID` INT(11) NOT NULL,
  `Drug_ID` INT(11) NOT NULL,
  `NumOfUse` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`Operation_ID`, `Drug_ID`),
  INDEX `Drug_ID_idx` (`Drug_ID` ASC),
  CONSTRAINT `Drug_ID_OpDrug`
    FOREIGN KEY (`Drug_ID`)
    REFERENCES `mydb`.`Drugs` (`Drug_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Op_ID_OpDrug`
    FOREIGN KEY (`Operation_ID`)
    REFERENCES `mydb`.`Operation` (`Operation_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`OperationNursery`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OperationNursery` ;

CREATE TABLE IF NOT EXISTS `mydb`.`OperationNursery` (
  `Operation_ID` INT(11) NOT NULL,
  `Nurse_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Operation_ID`, `Nurse_ID`),
  INDEX `Nur_ID_idx` (`Nurse_ID` ASC),
  CONSTRAINT `Nur_ID_OpNur`
    FOREIGN KEY (`Nurse_ID`)
    REFERENCES `mydb`.`Nurse` (`Nurse_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Op_ID_OpNur`
    FOREIGN KEY (`Operation_ID`)
    REFERENCES `mydb`.`Operation` (`Operation_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`OperationSupply`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OperationSupply` ;

CREATE TABLE IF NOT EXISTS `mydb`.`OperationSupply` (
  `Operation_ID` INT(11) NOT NULL,
  `MedicalSupply_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Operation_ID`, `MedicalSupply_ID`),
  INDEX `Med_ID_idx` (`MedicalSupply_ID` ASC),
  CONSTRAINT `Med_ID_OpSup`
    FOREIGN KEY (`MedicalSupply_ID`)
    REFERENCES `mydb`.`MedicalSuppliy` (`MedicalSupply_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Op_ID_OpSup`
    FOREIGN KEY (`Operation_ID`)
    REFERENCES `mydb`.`Operation` (`Operation_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Pharmacy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Pharmacy` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Pharmacy` (
  `Pharmacy_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Location` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`Pharmacy_ID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Registrate_In`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Registrate_In` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Registrate_In` (
  `Patient_ID` INT(11) NOT NULL,
  `Department_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Patient_ID`, `Department_ID`),
  INDEX `Dep_ID_idx` (`Department_ID` ASC),
  CONSTRAINT `Dep_ID_RegIn`
    FOREIGN KEY (`Department_ID`)
    REFERENCES `mydb`.`Department` (`Department_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Patient_ID_RegIn`
    FOREIGN KEY (`Patient_ID`)
    REFERENCES `mydb`.`Patient` (`Patient_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Storage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Storage` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Storage` (
  `Pharmacy_ID` INT(11) NOT NULL,
  `Drug_ID` INT(11) NOT NULL,
  `Inventory` MEDIUMTEXT NOT NULL,
  PRIMARY KEY (`Pharmacy_ID`, `Drug_ID`),
  INDEX `Pharmacy_ID_idx` (`Pharmacy_ID` ASC),
  INDEX `Drug_ID_idx` (`Drug_ID` ASC),
  CONSTRAINT `Drug_ID_Storage`
    FOREIGN KEY (`Drug_ID`)
    REFERENCES `mydb`.`Drugs` (`Drug_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Pharmacy_ID_Storage`
    FOREIGN KEY (`Pharmacy_ID`)
    REFERENCES `mydb`.`Pharmacy` (`Pharmacy_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`UseByDoc`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`UseByDoc` ;

CREATE TABLE IF NOT EXISTS `mydb`.`UseByDoc` (
  `Doctor_ID` INT(11) NOT NULL,
  `MedicalSupply_ID` INT(11) NOT NULL,
  PRIMARY KEY (`MedicalSupply_ID`, `Doctor_ID`),
  INDEX `Med_ID_idx` (`MedicalSupply_ID` ASC),
  INDEX `Doc_ID_UseByDoc` (`Doctor_ID` ASC),
  CONSTRAINT `Doc_ID_UseByDoc`
    FOREIGN KEY (`Doctor_ID`)
    REFERENCES `mydb`.`Doctor` (`Doctor_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Med_ID_UseByDoc`
    FOREIGN KEY (`MedicalSupply_ID`)
    REFERENCES `mydb`.`MedicalSuppliy` (`MedicalSupply_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`UseByNurse`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`UseByNurse` ;

CREATE TABLE IF NOT EXISTS `mydb`.`UseByNurse` (
  `Nurse_ID` INT(11) NOT NULL,
  `MedicalSupply_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Nurse_ID`, `MedicalSupply_ID`),
  INDEX `Medic_ID_idx` (`MedicalSupply_ID` ASC),
  CONSTRAINT `Medic_ID_UseByNurse`
    FOREIGN KEY (`MedicalSupply_ID`)
    REFERENCES `mydb`.`MedicalSuppliy` (`MedicalSupply_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Nur_ID_UseByNurese`
    FOREIGN KEY (`Nurse_ID`)
    REFERENCES `mydb`.`Nurse` (`Nurse_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`Worker`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Worker` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Worker` (
  `Worker_ID` INT(11) NOT NULL AUTO_INCREMENT,
  `Person_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Worker_ID`),
  INDEX `Person_ID_idx` (`Person_ID` ASC),
  CONSTRAINT `Person_ID_Worker`
    FOREIGN KEY (`Person_ID`)
    REFERENCES `mydb`.`Person` (`Person_ID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`WorkInDepartment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`WorkInDepartment` ;

CREATE TABLE IF NOT EXISTS `mydb`.`WorkInDepartment` (
  `Department_ID` INT(11) NOT NULL,
  `Worker_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Department_ID`, `Worker_ID`),
  INDEX `Department_ID_idx` (`Department_ID` ASC),
  INDEX `Worker_ID_idx` (`Worker_ID` ASC),
  CONSTRAINT `Department_ID_InDepartment`
    FOREIGN KEY (`Department_ID`)
    REFERENCES `mydb`.`Department` (`Department_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Worker_ID_InDepartment`
    FOREIGN KEY (`Worker_ID`)
    REFERENCES `mydb`.`Worker` (`Worker_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`WorkInPharmacy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`WorkInPharmacy` ;

CREATE TABLE IF NOT EXISTS `mydb`.`WorkInPharmacy` (
  `Pharmacy_ID` INT(11) NOT NULL,
  `Worker_ID` INT(11) NOT NULL,
  PRIMARY KEY (`Pharmacy_ID`, `Worker_ID`),
  INDEX `Pharmacy_ID_idx` (`Pharmacy_ID` ASC),
  INDEX `Worker_ID_idx` (`Worker_ID` ASC),
  CONSTRAINT `Pharmacy_ID_InPharmacy`
    FOREIGN KEY (`Pharmacy_ID`)
    REFERENCES `mydb`.`Pharmacy` (`Pharmacy_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Worker_ID_InPharmacy`
    FOREIGN KEY (`Worker_ID`)
    REFERENCES `mydb`.`Worker` (`Worker_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `mydb`.`OperationDetails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`OperationDetails` ;

CREATE TABLE IF NOT EXISTS `mydb`.`OperationDetails` (
  `Operation_ID` INT NOT NULL AUTO_INCREMENT,
  `Patient_ID` VARCHAR(45) NULL,
  PRIMARY KEY (`Operation_ID`))
ENGINE = InnoDB;

USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`ContactInfo_BEFORE_INSERT` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`ContactInfo_BEFORE_INSERT`
BEFORE INSERT ON `mydb`.`ContactInfo`
FOR EACH ROW
BEGIN
if new.Email not like '%_@%_._%'
then 
signal sqlstate value '40001'
set message_text = 'Email address is not valid';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`ContactInfo_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`ContactInfo_BEFORE_UPDATE`
BEFORE UPDATE ON `mydb`.`ContactInfo`
FOR EACH ROW
BEGIN
if new.Email not like '%_@%_._%'
then 
signal sqlstate value '40002'
set message_text = 'Email address is not valid';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Doctor_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Doctor_BEFORE_INSERT` BEFORE INSERT ON `Doctor` FOR EACH ROW
BEGIN
if exists (select * from Patient where
new.Person_ID = Patient.Person_ID)
then
signal sqlstate value '40031'
set message_text = 'This person is a patient';
end if;
if exists (select * from Worker where
new.Person_ID = Worker.Person_ID)
then
signal sqlstate value '40032'
set message_text = 'This person is a worker';
end if;
if exists (select * from Nurse where
new.Person_ID = Nurse.Person_ID)
then
signal sqlstate value '40033'
set message_text = 'This person is a nurse';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Doctor_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Doctor_BEFORE_UPDATE` BEFORE UPDATE ON `Doctor` FOR EACH ROW
BEGIN
if exists (select * from Patient where
new.Person_ID = Patient.Person_ID)
then
signal sqlstate value '40035'
set message_text = 'This person is a patient';
end if;
if exists (select * from Worker where
new.Person_ID = Worker.Person_ID)
then
signal sqlstate value '40036'
set message_text = 'This person is a worker';
end if;
if exists (select * from Nurse where
new.Person_ID = Nurse.Person_ID)
then
signal sqlstate value '40037'
set message_text = 'This person is a nurse';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Diagnose_BEFORE_INSERT` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`Diagnose_BEFORE_INSERT`
BEFORE INSERT ON `mydb`.`Diagnose`
FOR EACH ROW
BEGIN
declare pat_status varchar(45);
declare doc_status varchar(45);
set pat_status = (select Patient.InhospitalOrNot from Patient where Patient.Patient_ID = New.Patient_ID);
set doc_status = (select Doctor.InhospitalOrNot from Doctor where Doctor.Doctor_ID = New.Doctor_ID);
if(pat_status <> doc_status)
then
signal sqlstate value '40011'
set message_text = 'Patient - Doctor does not match on inhospital status!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Diagnose_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`Diagnose_BEFORE_UPDATE`
BEFORE UPDATE ON `mydb`.`Diagnose`
FOR EACH ROW
BEGIN
declare pat_status varchar(45);
declare doc_status varchar(45);
set pat_status = (select Patient.InhospitalOrNot from Patient where Patient.Patient_ID = New.Patient_ID);
set doc_status = (select Doctor.InhospitalOrNot from Doctor where Doctor.Doctor_ID = New.Doctor_ID);
if(pat_status <> doc_status)
then
signal sqlstate value '40012'
set message_text = 'Patient - Doctor does not match on inhospital status!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Nurse_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Nurse_BEFORE_INSERT` BEFORE INSERT ON `Nurse` FOR EACH ROW
BEGIN
if exists (select * from Patient where
new.Person_ID = Patient.Person_ID)
then
signal sqlstate value '40038'
set message_text = 'This person is a patient';
end if;
if exists (select * from Worker where
new.Person_ID = Worker.Person_ID)
then
signal sqlstate value '40039'
set message_text = 'This person is a worker';
end if;
if exists (select * from Doctor where
new.Person_ID = Doctor.Person_ID)
then
signal sqlstate value '40040'
set message_text = 'This person is a doctor';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Nurse_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Nurse_BEFORE_UPDATE` BEFORE UPDATE ON `Nurse` FOR EACH ROW
BEGIN
if exists (select * from Patient where
new.Person_ID = Patient.Person_ID)
then
signal sqlstate value '40041'
set message_text = 'This person is a patient';
end if;
if exists (select * from Worker where
new.Person_ID = Worker.Person_ID)
then
signal sqlstate value '40042'
set message_text = 'This person is a worker';
end if;
if exists (select * from Doctor where
new.Person_ID = Doctor.Person_ID)
then
signal sqlstate value '40043'
set message_text = 'This person is a doctor';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Nursing_BEFORE_INSERT` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`Nursing_BEFORE_INSERT`
BEFORE INSERT ON `mydb`.`Nursing`
FOR EACH ROW
BEGIN
declare pat_status varchar(45);
declare nur_status varchar(45);
set pat_status = (select Patient.InhospitalOrNot from Patient where Patient.Patient_ID = New.Patient_ID);
set nur_status = (select Nurse.InhospitalOrNot from Nurse where Nurse.Nurse_ID = New.Nurse_ID);
if(pat_status <> nur_status)
then
signal sqlstate value '40009'
set message_text = 'Patient - Nurse does not match on inhospital status!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Nursing_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`Nursing_BEFORE_UPDATE`
BEFORE UPDATE ON `mydb`.`Nursing`
FOR EACH ROW
BEGIN
declare pat_status varchar(45);
declare nur_status varchar(45);
set pat_status = (select Patient.InhospitalOrNot from Patient where Patient.Patient_ID = New.Patient_ID);
set nur_status = (select Nurse.InhospitalOrNot from Nurse where Nurse.Nurse_ID = New.Nurse_ID);
if(pat_status <> nur_status)
then
signal sqlstate value '40010'
set message_text = 'Patient - Nurse does not match on inhospital status!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`OperationDrug_BEFORE_INSERT` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`OperationDrug_BEFORE_INSERT`
BEFORE INSERT ON `mydb`.`OperationDrug`
FOR EACH ROW
BEGIN
declare inventory_remain long;
set inventory_remain = (select Drugs.Inventory from Drugs where New.Drug_ID = Drugs.Drug_ID);
if(inventory_remain - new.NumOfUse < 0)
then
signal sqlstate value '40007'
set message_text = 'Not valid drug inventory!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`OperationDrug_AFTER_INSERT` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`OperationDrug_AFTER_INSERT`
AFTER INSERT ON `mydb`.`OperationDrug`
FOR EACH ROW
BEGIN
update Drugs
set Drugs.Inventory = (Drugs.Inventory - New.NumOfUse)
where Drugs.Drug_ID = New.Drug_ID;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`OperationDrug_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`OperationDrug_BEFORE_UPDATE`
BEFORE UPDATE ON `mydb`.`OperationDrug`
FOR EACH ROW
BEGIN
declare inventory_remain long;
set inventory_remain = (select Drugs.Inventory from Drugs where New.Drug_ID = Drugs.Drug_ID);
if(inventory_remain - new.NumOfUse < 0)
then
signal sqlstate value '40008'
set message_text = 'Not valid drug inventory!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`OperationDrug_AFTER_UPDATE` $$
USE `mydb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mydb`.`OperationDrug_AFTER_UPDATE`
AFTER UPDATE ON `mydb`.`OperationDrug`
FOR EACH ROW
BEGIN
update Drugs
set Drugs.Inventory = (Drugs.Inventory - New.NumOfUse)
where Drugs.Drug_ID = New.Drug_ID;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Storage_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Storage_BEFORE_INSERT` BEFORE INSERT ON `Storage` FOR EACH ROW
BEGIN
declare inventory_remain long;
set inventory_remain = (select Drugs.Inventory from Drugs where New.Drug_ID = Drugs.Drug_ID);
if(inventory_remain - new.Inventory < 0)
then
signal sqlstate value '40017'
set message_text = 'Not valid drug inventory!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Storage_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Storage_AFTER_INSERT` AFTER INSERT ON `Storage` FOR EACH ROW
BEGIN
update Drugs
set Drugs.Inventory = (Drugs.Inventory - New.Inventory)
where Drugs.Drug_ID = New.Drug_ID;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Storage_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Storage_BEFORE_UPDATE` BEFORE UPDATE ON `Storage` FOR EACH ROW
BEGIN
declare inventory_remain long;
set inventory_remain = (select Drugs.Inventory from Drugs where New.Drug_ID = Drugs.Drug_ID);
if(inventory_remain - new.Inventory < 0)
then
signal sqlstate value '40018'
set message_text = 'Not valid drug inventory!';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Storage_AFTER_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Storage_AFTER_UPDATE` AFTER UPDATE ON `Storage` FOR EACH ROW
BEGIN
update Drugs
set Drugs.Inventory = (Drugs.Inventory - New.Inventory)
where Drugs.Drug_ID = New.Drug_ID;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Worker_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Worker_BEFORE_INSERT` BEFORE INSERT ON `Worker` FOR EACH ROW
BEGIN
if exists (select * from Patient where
new.Person_ID = Patient.Person_ID)
then
signal sqlstate value '40025'
set message_text = 'This person is a patient';
end if;
if exists (select * from Doctor where
new.Person_ID = Doctor.Person_ID)
then
signal sqlstate value '40026'
set message_text = 'This person is a doctor';
end if;
if exists (select * from Nurse where
new.Person_ID = Nurse.Person_ID)
then
signal sqlstate value '40027'
set message_text = 'This person is a nurse';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Worker_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Worker_BEFORE_UPDATE` BEFORE UPDATE ON `Worker` FOR EACH ROW
BEGIN
if exists (select * from Patient where
new.Person_ID = Patient.Person_ID)
then
signal sqlstate value '40028'
set message_text = 'This person is a patient';
end if;
if exists (select * from Doctor where
new.Person_ID = Doctor.Person_ID)
then
signal sqlstate value '40029'
set message_text = 'This person is a doctor';
end if;
if exists (select * from Nurse where
new.Person_ID = Nurse.Person_ID)
then
signal sqlstate value '40030'
set message_text = 'This person is a nurse';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`WorkInDepartment_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`WorkInDepartment_BEFORE_INSERT` BEFORE INSERT ON `WorkInDepartment` FOR EACH ROW
BEGIN
if exists (select * from WorkInPharmacy where
new.Worker_ID = WorkInPharmacy.Worker_ID)
then
signal sqlstate value '40003'
set message_text = 'Worker already work in pharmacy';
end if;
if exists (select * from WorkInDepartment where
new.Worker_ID = WorkInDepartment.Worker_ID)
then
signal sqlstate value '40013'
set message_text = 'Worker already has a position in another department';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`WorkInDepartment_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`WorkInDepartment_BEFORE_UPDATE` BEFORE UPDATE ON `WorkInDepartment` FOR EACH ROW
BEGIN
if exists (select * from WorkInPharmacy where
new.Worker_ID = WorkInPharmacy.Worker_ID)
then
signal sqlstate value '40004'
set message_text = 'Worker already work in pharmacy';
end if;
if exists (select * from WorkInDepartment where
new.Worker_ID = WorkInDepartment.Worker_ID)
then
signal sqlstate value '40014'
set message_text = 'Worker already has a position in another department';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`WorkInPharmacy_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`WorkInPharmacy_BEFORE_INSERT` BEFORE INSERT ON `WorkInPharmacy` FOR EACH ROW
BEGIN
if exists (select * from WorkInDepartment where
new.Worker_ID = WorkInDepartment.Worker_ID)
then
signal sqlstate value '40005'
set message_text = 'Worker already work in department';
end if;
if exists (select * from WorkInPharmacy where
new.Worker_ID = WorkInPharmacy.Worker_ID)
then
signal sqlstate value '40015'
set message_text = 'Worker already has a position in another pharmacy';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`WorkInPharmacy_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`WorkInPharmacy_BEFORE_UPDATE` BEFORE UPDATE ON `WorkInPharmacy` FOR EACH ROW
BEGIN
if exists (select * from WorkInDepartment where
new.Worker_ID = WorkInDepartment.Worker_ID)
then
signal sqlstate value '40006'
set message_text = 'Worker already work in department';
end if;
if exists (select * from WorkInPharmacy where
new.Worker_ID = WorkInPharmacy.Worker_ID)
then
signal sqlstate value '40016'
set message_text = 'Worker already has a position in another pharmacy';
end if;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
